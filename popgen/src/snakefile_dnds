REF= "../ref/GCF_000002195.4_Amel_4.5_genomic.fna"
GFF = "../ref/GCF_000002195.4_Amel_4.5_genomic.gff"
GATK = "/home/warnerm/local_install/GenomeAnalysisTK.jar"
CERANA = "../temp/alignments/africa_cerana/rg_added/SRR957079.bam" #A. cerana aligned to Amel_4.5
CALLER=["freebayes", "GATK", "samtools"]  


rule all:
	input: "../results/cerana_dnds_filtered.txt"

rule freeBayes:
	input:	CERANA
	output: "../data/cerana/freebayes.vcf"
	shell:	"freebayes -= -b {input} -v {output} -f {REF}"

rule GATK:
	input:	CERANA
	output: "../data/cerana/GATK.vcf"
	shell: """export PATH=~/local_install/jdk1.8.0_05/bin:$PATH; gatk --java-options "-Xmx30g" HaplotypeCaller \
				-R {REF} \
				-I {input} \
				-O {output} \
				--heterozygosity 0.002 \
				--mbq 20 \
				--max-alternate-alleles 2"""

rule samtools:
	input:	CERANA
	output: "../data/cerana/samtools.vcf"
	shell: "samtools mpileup -ugf {REF} {input} | bcftools call -vc - | vcfutils.pl varFilter -D 500 > {output}"

rule allelicPrimitives:
	input: "../data/cerana/{VCFcaller}.vcf"
	output: "../data/cerana/{VCFcaller}.primitives.vcf"
	shell: "java -Xmx14g -jar {GATK} -T VariantsToAllelicPrimitives -R {REF} --variant {input} -o {output}"

# generate consensus SNP calls
rule BAYSIC: 	
	input: expand("../data/cerana/{VCFcaller}.primitives.vcf", VCFcaller=CALLER)
	output: "../data/cerana/consensus.vcf.pos","../data/cerana/consensus.vcf"
	run: 
		infiles = "".join([" --vcf " + i for i in input])
		shell("perl baysic.pl --statsOutFile ../data/cerana/combined.stats --pvalCutoff 0.8 {} --countsOutFile ../data/cerana/combined.cts --vcfOutFile ../data/cerana/consensus.vcf".format(infiles))

# select bi-allelic consensus sites
rule consensusFilter:
     input: "../data/cerana/freebayes.primitives.vcf","../data/cerana/consensus.vcf.pos"
     output: "../data/cerana/final.recode.vcf"
     shell: "vcftools --vcf {input[0]} --positions {input[1]} --max-alleles 2 --remove-indels --max-missing 0.9 --recode --mac 1 --out  ../data/cerana/final"

# generate new fasta file with consensus SNPs
rule FastaAlternateReferenceMaker:
	input: "../data/cerana/final.recode.vcf"
	output: "../data/cerana/cerana.fa"
	version: "1.0"
	shell: "export PATH=~/local_install/jdk1.8.0_05/bin:$PATH; java -jar {GATK}  -T FastaAlternateReferenceMaker -R {REF} --variant {input} -o {output}"

rule editName:
	input: "../data/cerana/cerana.fa"
	output: "../data/cerana/cerana_edit.fa"
	shell: "cat {input} | sed 's/>[0-9][0-9]* />/' | sed 's/:.*//' > {output}"


#mask genomic regions with no coverage
rule noCoverage:
	input: CERANA
	output: "../data/cerana/no_coverage.bed"
	version: "1.0"
	shell: "samtools view -q 20 -F 1024 -u  {input} | genomeCoverageBed -ibam - -bga |grep -w 0$ > {output}" # exclude poor mapping, not primary alignment and duplicate

rule maskLowCoverage:
	input: "../data/cerana/cerana_edit.fa", "../data/cerana/no_coverage.bed"
	output: "../data/cerana/cerana.masked.fa"
	shell: "maskFastaFromBed -fi {input[0]} -bed {input[1]} -fo {output}"


#extract cds from both species
rule extractGenes:
	input: "../data/cerana/cerana.masked.fa"
	output: "../data/cerana/cerana.cds.fa","../data/cerana/mellifera.cds.fa"
	version: "1.0"
	shell: """gffread {GFF} -g {input} -x {output[0]}; \
	gffread {GFF} -g {REF} -x {output[1]}"""


# run pairwise dnds using paml
rule dnds:
	input: "../data/cerana/cerana.cds.fa", "../data/cerana/mellifera.cds.fa"
	output: "../data/cerana/cerana_dnds.txt"
	shell: "python2.7 dnds.py {input} {output}"

rule getMap:
	input: "../data/cerana/mellifera.cds.fa"
	output: "../data/cerana/map"
	shell: """grep ">" {input} | sed 's/>//' | sed 's/gene=//' > {output}"""

rule getLongest:
	input: "../data/cerana/mellifera.cds.fa"
	output: "../data/cerana/longest_isos.txt"
	shell: "python2.7 get_longest.py {input} {output}"

rule filter_dnds: 
	input: "../data/cerana/cerana_dnds.txt","../data/cerana/longest_isos.txt","../data/cerana/map"
	output: "../results/cerana_dnds_filtered.txt"
	shell: "Rscript filter_dnds.R {input} {output}"

#Get ODB9 protein files
#rule ODB9_getData:
#	output: "../data/ref_Mphar.fa","../data/ref_Amel.fa","../data/ref_Nvit.fa"
#	shell:

# makeBlastDB for the protein files from ODB9
#rule makeBlastDB:
#	input: "../data/ref_{ref}.fa"
#	output: "../temp/ref_{ref}.phr"
#	shell: "makeblastdb -in {input} -dbtype prot -out ../temp/{wildcards.ref}"

#Perform genome-wide pairwise blast. *_prot.fa files are the latest protein coding files
#rule pairwiseBlast:
#	input: ref="../temp/{ref}.phr",test="../data/{test}_prot.fa"
#	output: "../out/{ref}_{test}_blastRes.tab"
#	shell: "module load python/anaconda/2.7; python pairwiseBlast.py -s {input[test]} -d {input[ref]} -t {THREADS} -o {output}"

# Get OGGs for Amel/Mphar/Nvit
#rule endOGG:
#	input: geneList="../out/{ref}_{test}_blastRes.tab", oggList="../temp/{ref}.tab"
#	output: "../out/{test}_{ref}_END"
#	shell: "module load python/anaconda/2.7; sed 's/gnl.* //' {input[geneList]} | awk {{'print$2'}} | sort | uniq > ../temp/geneEdit; python2.7 getOGG.py ../temp/geneEdit {output} {THREADS} {input[oggList]} EOG090R"

# run paml on amino acid sequences to get branch lengths