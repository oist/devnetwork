REF= "../ref/GCF_000002195.1_Amel_4.5_genomic.fna"
GFF = "../ref/GCF_000002195.1_Amel_4.5_genomic.gff"
GATK = "/home/warnerm/local_install/GenomeAnalysisTK.jar"
CERANA = "../temp/alignments/africa_cerana/rg_added/SRR957079.bam" #A. cerana aligned to Amel_4.5
CALLER=["freebayes", "GATK", "samtools"]  


rule all:
	input: "../data/cerana/cerana.fa"

rule freeBayes:
	input:	CERANA
	output: "../data/cerana/freebayes.vcf"
	shell:	"freebayes -= -b {input} -v {output} -f {REF}"

rule GATK:
	input:	CERANA
	output: "../data/cerana/GATK.vcf"
	shell:	"java  -Xmx30g -jar {GATK} -nct 12 -allowPotentiallyMisencodedQuals  -T HaplotypeCaller -R  {REF} -I {input} -hets 0.002  -mbq 20 -o {output} --max_alternate_alleles 2"

rule samtools:
	input:	CERANA
	output: "../data/cerana/samtools.vcf"
	shell: "samtools mpileup -ugf {REF} {input} | bcftools call -vc - | vcfutils.pl varFilter -D 500 > {output}"

rule allelicPrimitives:
	input: "../data/cerana/{VCFcaller}.vcf"
	output: "../data/cerana/{VCFcaller}.primitives.vcf"
	shell: "java -Xmx14g -jar $GATK -T VariantsToAllelicPrimitives -R {REF} --variant {input} -o {output}"

# generate consensus SNP calls
rule BAYSIC: 	
	input: expand("../data/cerana/{VCFcaller}.primitives.vcf", VCFcaller=CALLER)
	output: "../data/cerana/consensus.vcf"
	version: "1.0"
	run: 
		infiles = "".join([" --vcf " + i for i in input])
		shell("baysic.pl --statsOutFile ../data/cerana/combined.stats --pvalCutoff 0.8 {} --countsOutFile ../data/cerana/combined.cts --vcfOutFile {{output}}".format(infiles))

# filter the vcf to get rid of indels and unlikely genotypes
rule consensusFilter:
	input: "../data/cerana/consensus.vcf"
	output: "../data/cerana/consensus.filtered.vcf"
	version: "1.0"
	# remove indels and anything with morethan two alleles
	shell: "module load zlib; vcftools --vcf {input} --max-alleles 2 --remove-indels --recode --stdout  > {output}"

# generate new fasta file with consensus SNPs
rule FastaAlternateReferenceMaker:
	input: "../data/cerana/consensus.filtered.vcf"
	output: "../data/cerana/cerana.fa"
	version: "1.0"
	shell: "java -jar $GATK  -T FastaAlternateReferenceMaker -R {REF} --variant {input} -o {output}"


#rule getFasta:
#	input: "../var/final.cerana.recode.vcf.gz"
#	output: "../data/cerana.fa"
#	shell: "cat {REF} | vcf-consensus {input} > {output}"

#extract cds from both species
#rule extractGenes:
#	input: "../data/cerana.fa"
#	output: "../data/cerana.cds.fa","../data/mellifera.cds.fa"
#	version: "1.0"
#	shell: """gffread {GFF} -g {input} -x {output[0]}; \
#	gffread {GFF} -g {REF} -x {output[1]}"""


# run pairwise dnds using paml
#rule dnds:
#	input: "../data/cerana.cds.fa", "../data/mellifera.cds.fa"
#	output: "../data/cerana_dnds.txt"
#	shell: "python2.7 dnds.py {input} > {output}"

#rule getMap:
#	input: "../data/mellifera.cds.fa"
#	output: "../data/map"
#	shell: "grep ">" {input} | sed 's/>//' | sed 's/gene=//' > {output}"

#rule getLongest:
#	input: "../data/mellifera.cds.fa"
#	output: "../data/longest_isos.txt"
#	shell: "python2.7 get_longest.py {input} {output}"

#rule filter_dnds: 
#	input: "../data/cerana_dnds.txt","../data/longest_isos.txt","../data/map"
#	output: "../results/cerana_dnds_filtered.txt"
#	shell: "Rscript filter_dnds.R {input} {output}"

#Get ODB9 protein files
#rule ODB9_getData:
#	output: "../data/ref_Mphar.fa","../data/ref_Amel.fa","../data/ref_Nvit.fa"
#	shell:

# makeBlastDB for the protein files from ODB9
#rule makeBlastDB:
#	input: "../data/ref_{ref}.fa"
#	output: "../temp/ref_{ref}.phr"
#	shell: "makeblastdb -in {input} -dbtype prot -out ../temp/{wildcards.ref}"

#Perform genome-wide pairwise blast. *_prot.fa files are the latest protein coding files
#rule pairwiseBlast:
#	input: ref="../temp/{ref}.phr",test="../data/{test}_prot.fa"
#	output: "../out/{ref}_{test}_blastRes.tab"
#	shell: "module load python/anaconda/2.7; python pairwiseBlast.py -s {input[test]} -d {input[ref]} -t {THREADS} -o {output}"

# Get OGGs for Amel/Mphar/Nvit
#rule endOGG:
#	input: geneList="../out/{ref}_{test}_blastRes.tab", oggList="../temp/{ref}.tab"
#	output: "../out/{test}_{ref}_END"
#	shell: "module load python/anaconda/2.7; sed 's/gnl.* //' {input[geneList]} | awk {{'print$2'}} | sort | uniq > ../temp/geneEdit; python2.7 getOGG.py ../temp/geneEdit {output} {THREADS} {input[oggList]} EOG090R"

# run paml on amino acid sequences to get branch lengths