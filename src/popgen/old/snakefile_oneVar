#SAMPLES, = glob_wildcards("../data/fastq/{sample}_pass.fastq")
SAMPLES, = glob_wildcards("../temp/alignments/{sample}_RG.bam")

REF = "../ref/GCF_000002195.4_Amel_4.5_genomic.fna"
GFF = "../ref/GCF_000002195.4_Amel_4.5_genomic.gff"
#GATK = "/home/warnerm/programs/bin/gatk-package-4.0.5.0-local.jar"
PICARD = "/home/warnerm/local_install/picard.jar"
THREADS = 12

rule all:
	input: "../var/snpEff.txt","../data/popgen/var/annotation.csv"

rule buildBowtie:
	input: REF
	output: "../ref/Amel.1.bt2"
	shell: "bowtie2-build {REF} ../ref/Amel"

#rule alignReads:
#	input: "../ref/Amel.1.bt2",samp="../data/fastq/{sample}_pass.fastq"
#	output: "../temp/alignments/{sample}.bam"
#	shell: """bowtie2 -x ../ref/Amel -U {input[samp]} -p {THREADS} | samtools view -bSF4 > {output}; rm {input[samp]}"""

rule makeBED:
	input: GFF
	output: "../ref/exons.bed"
	shell: """grep "exon" {GFF} | gff2bed > {output}"""

rule makeDict:
	input: REF
	output: "../ref/GCF_000002195.4_Amel_4.5_genomic.dict"
	shell: "java -jar {PICARD} CreateSequenceDictionary R={input} O={output}"

#'-=' means report genome qualities, the params makes a list of input files, min-alternate-count sets minimum number of chromosomes sampled to consider an allele
#Using target= exons.bed because we only want to call variants for exons
rule freeBayes:
	input: expand("../temp/alignments/{sample}_RG.bam",sample=SAMPLES),bed = "../ref/exons.bed"
	output: protected("../var/freebayes.vcf")
	params: files = "-b " + " -b ".join(expand("../temp/alignments/{sample}_RG.bam",sample=SAMPLES))
	shell: "freebayes -= {params.files} -v {output} -f {REF} --min-alternate-count 4 --use-best-n-alleles 3"

rule allelicPrimitives:
	input: "../var/{VCFcaller}.vcf"
	output: "../var/{VCFcaller}.primatives.vcf"
	#wildcard_constraints: VCFcaller=CALLER
	shell: "cat {input} | vcfallelicprimitives -kg > {output}"

# estimate SNP effects
rule snpEff:
	input: "../var/freebayes.vcf"
	output: "../var/snpEff.txt"
	shell: "java -Xmx7g -jar /home/warnerm/local_install/snpEff/snpEff.jar -no-utr -no-upstream -no-intron -no-intergenic -no-downstream Apis_mellifera {input} >  {output}"

rule getCDS:
	input: GFF, REF
	output: "../ref/cds.fa"
	shell: "gffread {input[0]} -g {input[1]} -x {output}"

rule filterLongest:
	input: rules.getCDS.output
	output: "../ref/longest.fa"
	shell: "python filter_longest.py {input} > {output}"

# exports silent and replacement sites from snpEff
rule parseSilentReplacement:
	input: rules.filterLongest.output, rules.snpEff.output
	output: "../data/popgen/var/annotation.csv"
	shell: "python2.7 parse_silentReplacement.py {input} > {output}"









