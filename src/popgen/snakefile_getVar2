'''
#Software
GATK version 4.0.5.2
'''
SAMPLES, = glob_wildcards("../temp/alignments/africa_cerana/unsorted/{sample}.bam")

REF = "../ref/GCF_000002195.4_Amel_4.5_genomic.fna"
GFF = "../ref/GCF_000002195.4_Amel_4.5_genomic.gff"
PICARD = "/home/warnerm/local_install/picard.jar"
THREADS = 20
PLATYPUS = "/home/warnerm/local_install/Platypus_0.8.1/Platypus.py"
CALLER=["samtools", "platypus"]

rule all:
	input: "../var/consensus.vcf.pos"

rule makeBED:
	input: GFF
	output: "../ref/exons.bed"
	shell: """grep "exon" {GFF} | gff2bed > {output}"""

#Sorts the bam files; necessary for at least samtools
rule PicardGroups:
	input: "../temp/alignments/africa_cerana/unsorted/{sample}.bam"
	output: "../temp/alignments/africa_cerana/sorted/{sample}.bam"
	shell: """java -jar {PICARD} AddOrReplaceReadGroups I={input} O={output} SORT_ORDER=coordinate \
				CREATE_INDEX=true RGPL=illumina RGID=11 RGSM=mysample RGLB=lib1 RGPU=unit1"""

#'-=' means report genome qualities, the params makes a list of input files, min-alternate-count sets minimum number of chromosomes sampled to consider an allele
#Using target= exons.bed because we only want to call variants for exons
#rule freeBayes:
#	input: expand("../temp/alignments/africa_cerana/sorted/{sample}.bam",sample=SAMPLES),bed = "../ref/exons.bed"
#	output: protected("../var/freebayes.vcf")
#	params: files = "-b " + " -b ".join(expand("../temp/alignments/africa_cerana/sorted/{sample}.bam",sample=SAMPLES))
#	shell: "freebayes -= {params.files} -v {output} -f {REF} --min-alternate-count 4 --use-best-n-alleles 3 --targets ../ref/exons/bed"

#rule GATK:
#	input: expand("../temp/alignments/africa_cerana/sorted/{sample}.bam",sample=SAMPLES),bed = "../ref/exons.bed",dict="../ref/GCF_000002195.4_Amel_4.5_genomic.dict"
#	output: protected("../var/GATK.vcf")
#	params: files = "-I " + " -I ".join(expand("../temp/alignments/africa_cerana/sorted/{sample}.bam",sample=SAMPLES))
#	shell: """export PATH=~/local_install/jdk1.8.0_05/bin:$PATH; gatk --java-options "-Xmx30g" HaplotypeCaller \
#				-R {REF} \
#				{params.files} \
#				-O {output} \
#				-L ../ref/exons.bed \
#				--heterozygosity 0.002 \
#				--mbq 20 \
#				--max-alternate-alleles 4"""

rule samtools:
	input: BAMs = expand("../temp/alignments/africa_cerana/sorted/{sample}.bam",sample=SAMPLES),bed = "../ref/exons.bed"
	output: protected("../var/samtools.vcf")
	shell: "samtools mpileup -l {input[bed]} -ugf {REF} {input[BAMs]} | bcftools call -vc - | vcfutils.pl varFilter -D 500 > {output}"

rule platypus:
	input: expand("../temp/alignments/africa_cerana/sorted/{sample}.bam",sample=SAMPLES),bed = "../ref/exons.bed"
	output: protected("../var/platypus.vcf")
	params: files = ",".join(expand("../temp/alignments/africa_cerana/sorted/{sample}.bam",sample=SAMPLES))
	shell: "python2.7 $PLATYPUS callVariants --nCPU={THREADS} --refFile={REF} --bamFiles={params.files} --output={output} --maxReads=25000000 --regions=../ref/exons.bed"

rule allelicPrimitives:
	input: "../var/{VCFcaller}.vcf"
	output: "../var/{VCFcaller}.primatives.vcf"
	shell: "cat {input} | vcfallelicprimitives -kg > {output}"

# generate consensus SNP calls
rule BAYSIC: 	
	input: expand("../var/{VCFcaller}.primatives.vcf", VCFcaller=CALLER)
	output: "../var/consensus.vcf.pos"
	version: "1.0"
	run: 
		infiles = "".join([" --vcf " + i for i in input])
		shell("perl baysic.pl --statsOutFile ../var/combined.stats --pvalCutoff 0.8 {} --countsOutFile ../var/combined.cts --vcfOutFile ../var/consensus.vcf".format(infiles))




