#Using sequence data from Protobothrops elegans to compute dn/ds values for P. mucrosquamatus genes

'''
# Software requirements
GNU coreutils-8.23
VCFtools (v0.1.13)
bedtools v2.16.2
BAYSIC 2015-01-27 http://www.biomedcentral.com/1471-2105/15/104/abstract
freebayes v0.9.21-19-gc003c1e
GATK version 3.3-0-g37228af
samtools Version: 1.2 (using htslib 1.2.1)
TopHat v2.0.8
bowtie/1.1.0 
rsem RSEM v1.2.11
'''

# reference files from ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA_000980195.3_M.pharaonis_V2.0
SAMPLES, = glob_wildcards("../data/reseq/{sample}.bam")
import os
samplesFile="../ref/samples.txt"
outgroupFile="../ref/outgroup.txt"
PYTHON="/apps/free/python/2.7.8/bin/python"
REF="../ref/GCF_001527695.1_P.Mucros_1.0_genomic.fna"
GFF="../ref/GCF_001527695.1_P.Mucros_1.0_genomic.gff"
BAMs=expand("../data/reseq/{sample}.bam", sample=SAMPLES)
CALLER=["freebayes", "samtools", "GATK", "platypus"] 

# rule all:
# 	input: "../out/bayesian_results.csv"

rule freeBayes:
	input:	BAMs
	output: protected("../data/popgen/var/freebayes.vcf")
	params: files = "-b " + " -b ".join(BAMs)
	shell:	"freebayes -= {params.files} -v {output} -f {REF} --use-best-n-alleles 3 --min-alternate-count 4 --targets ../ref/exons.bed"

rule GATK:
	input:	BAMs
	output: protected("../data/popgen/var/GATK.vcf")
	params: files = "-I " + " -I ".join(BAMs)
	shell:	"java  -Xmx30g -jar $GATK -nct 12 -allowPotentiallyMisencodedQuals  -T HaplotypeCaller -R  {REF} {params.files} -hets 0.002  -mbq 20 -o {output} --max_alternate_alleles 3 -L ../ref/exons.bed"

rule samtools:
	input:	BAMs
	output: protected("../data/popgen/var/samtools.vcf")
	shell: "samtools mpileup -l ../ref/exons.bed -ugf {REF} {input} | bcftools call -vc - | vcfutils.pl varFilter -D 500 > {output}"

rule platypus:
	input:	BAMs
	output: protected("../data/popgen/var/platypus.vcf")
	params: files = ",".join(BAMs)
	shell: ". ~/python2/bin/activate; Platypus.py callVariants --nCPU=12 --refFile={REF} --bamFiles={params.files}  --output={output} --regions=../ref/exons.bed --maxReads=25000000"

rule allelicPrimitives:
	input: "../data/popgen/var/{VCFcaller}.vcf"
	output: "../data/popgen/var/{VCFcaller}.primitives.vcf"
	shell: "java -Xmx14g -jar $GATK -U -T VariantsToAllelicPrimitives -R {REF} --variant {input} -o {output}"

# generate consensus SNP calls
rule BAYSIC: 	
	input: expand("../data/popgen/var/{VCFcaller}.primitives.vcf", VCFcaller=CALLER)
	output: "../data/popgen/var/consensus.vcf.pos"
	version: "1.0"
	run: 
		infiles = "".join([" --vcf " + i for i in input])
		shell("baysic.pl --statsOutFile ../data/popgen/var/combined.stats --pvalCutoff 0.8 {} --countsOutFile ../data/popgen/var/combined.cts --vcfOutFile ../data/popgen/var/consensus.vcf".format(infiles))

# select consensus sites, and remove non-snps
rule consensusFilter:
     input: "../data/popgen/var/freebayes.primitives.vcf", rules.BAYSIC.output
     output: "../data/popgen/var/final.recode.vcf"
     shell: "vcftools --vcf {input[0]} --positions {input[1]} --remove-indv Pelegans  --max-alleles 2 --remove-indels --max-missing 0.9 --recode --mac 1 --out  ../data/popgen/var/final"

# estimate SNP effects
rule snpEff:
	input: rules.consensusFilter.output
	output: "../data/popgen/var/snpEff.txt"
	shell: "java -Xmx7g -jar /apps/unit/MikheyevU/sasha/snpEff4/snpEff.jar -no-utr -no-upstream -no-intron -no-intergenic -no-downstream pmuc {input} >  {output}"
	""" python parse_silentReplacement.py ../ref/csd.fa temp.txt > {output} && rm temp.txt """

rule getCDS:
	input: GFF, REF
	output: "../ref/cds.fa"
	shell: "gffread {input[0]} -g {input[1]} -x {output}"

rule filterLongest:
	input: rules.getCDS.output
	output: "../ref/longest.fa"
	shell: "python filter_longest.py {input} > {output}"

# determine which SNPs are fixed and which are polymorphic
# for this we remove the outgroup and compute frequencies
rule fixedPolymorphic:	
	input: rules.consensusFilter.output
	output: "../data/popgen/var/snps.csv"
	shell: """module load zlib; vcftools --vcf {input} --remove-indv Pflavoviridis --freq; \
    awk -v OFS="," ' NR>1 {{split($5,a,":"); if((a[2]=="1") || (a[2]=="0")) state="F"; else state="P"; print $1,$2,state}}' out.frq > {output} """

# exports silent and replacement sites from snpEff
rule parseSilentReplacement:
	input: rules.filterLongest.output, rules.snpEff.output
	output: "../data/popgen/var/annotation.csv"
	shell: ". ~/python2/bin/activate ; python parse_silentReplacement.py {input} > {output}"

# calculate how many synonymous vs_non-synonymous changes are possible
rule silentReplacement:
	input: rules.filterLongest.output
	output: "../data/popgen/var/silentReplacement.csv"
	shell: ". ~/python2/bin/activate; python silent_replacement.py {input} > {output}"

rule snipre:
	input: rules.silentReplacement.output, rules.fixedPolymorphic.output, rules.parseSilentReplacement.output
	output: "../out/bayesian_results.csv"
	shell: "Rscript --vanilla snipre.R"