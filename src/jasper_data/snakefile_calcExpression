REF = "ref/GCF_000002195.4_Amel_4.5_genomic.fna"
GFF = "ref/GCF_000002195.4_Amel_4.5_genomic.gff" #After removing everything after space from scaffolds

SAMPLES, = glob_wildcards("fastq/{sample}_pass_1.fastq")

THREADS = 20


rule all:
	input: "out/counts.csv.gz", "out/fpkm.csv.gz"

rule makeRsemReference:
	output: "ref/Amel.seq"
	shell: """grep "exon" {GFF} | grep "gene=" > ref/exon.gff; \
	gffread ref/exon.gff -g {REF} -w ref/transcripts.fa ;\
	grep ">" ref/transcripts.fa | tr -d ">" | sed 's/gene=//' | awk '{{print $2"\t"$1}}' > ref/knownIsoforms.txt; \
	rsem-prepare-reference --bowtie --transcript-to-gene-map ref/knownIsoforms.txt ref/transcripts.fa ref/Amel; \
	rm ref/exon.gff ref/transcripts.fa ref/knownIsoforms.txt"""

rule rsemCalculateExpression:
	input: left="fastq/{sample}_pass_1.fastq",
			right="fastq/{sample}_pass_2.fastq",
			db="ref/Amel.seq"
	output: "rsem/{sample}.genes.results"
	shell: "rsem-calculate-expression -p {THREADS} --paired-end {input[left]} {input[right]} ref/Amel {wildcards.sample}; mv {wildcards.sample}.* rsem/"

#gather rsem results and make tables of counts and fpkm (samples in columns, genes in rows)
rule collectRsem:
	input: expand("rsem/{sample}.genes.results", sample=SAMPLES)
	output: "out/counts.csv.gz", "out/fpkm.csv.gz"
	shell: "python collect_counts.py genes data/rsem/ | gzip > {output[0]}; \
	python2.7 collect_fpkm.py genes data/rsem/ | gzip > {output[1]}"