#snakefile to call OGGs for Monomorium pharaonis genes

workdir: "/home/warnerm/mpharOGG"
SRC = "/home/warnerm/GitHub/genomics"
GENOMES = {"Mphar":"Mphar.fa","Amel":"Amel.fa"} ##GCF_000980195.1_M.pharaonis_V2.0_protein.faa, with seq IDS trimmed to only protein ID
SPECIES = ["Mphar","Amel"]
ODB_FASTA = "aa_seq_euk.fasta" ##Downloaded from OrthoDB8
THREADS = 120
REF_PREFIX = {"Mphar":"SINV","Amel":"GB"}
REF_SP = ["SINV","GB",""]
OGGLEVS = ["hym","hol"]
GFF = {"Mphar":"Mphar.gff","Amel":"Amel.gff"}

ODB = {"hym":"ODB8_EukOGs_genes_Hymenoptera-7399.txt","hol":"ODB8_EukOGs_genes_Endopterygota-33392.txt"}

rule all:
	input: "ThreeWayOGGMap.csv","HymOGG_hym.csv", "DmelDevelOGG.txt"

#Make database containing all protein sequences for the given OGG level (properly labeled with ortholog name)
rule makeProtDB:
	input: ODB_FASTA,ann=lambda wildcards: ODB[wildcards.db]
	output: "ref/{db}/{db}.fa"
	shell: """sed 's/>.*\t/>/' {input[0]} > aa_trimmed.fasta; \
		awk '{{print $4}}' {input[ann]} | sed '1d' > keepTr.txt; \
		pyfasta extract --header --fasta aa_trimmed.fasta --file keepTr.txt > {wildcards.db}Prot.fa; \
		python2.7 {SRC}/FastaHeaderOGG.py -i {wildcards.db}Prot.fa -s {input[ann]} -o ref/{wildcards.db}/{wildcards.db}.fa; \
		rm aa_trimmed.fasta {wildcards.db}Prot.fa"""

rule createOGGfa:
	input: dbfa="ref/{db}/{db}.fa",ann=lambda wildcards: ODB[wildcards.db]
	output: "OGGlist{db}"
	shell: """for OGG in $(awk '{{print $2}}' {input[ann]} | uniq | sed '1d' ); \
			do grep $OGG {input[dbfa]} | sed 's/>//' > $OGG"temp.txt"; \
			pyfasta extract --header --fasta {input[dbfa]} --file $OGG"temp.txt" > $OGG".fa"; \
			done;\
		ls *.fa > {output}; rm *temp.txt"""

#Build hidden markov models of orthologs
rule BuildHMM:
	input: 
		dbfa="ref/{db}/{db}.fa",
		OGG="OGGlist{db}",
		ann=lambda wildcards: ODB[wildcards.db]
	output: "ref/{db}/hmms"
	shell: """python2.7 {SRC}/OGGalign.py -t {THREADS} -s {input[ann]}; \
		mkdir ref/{wildcards.db}/hmm_dir; mv *.hmm ref/{wildcards.db}/hmm_dir/; ls ref/{wildcards.db}/hmm_dir > {output}"""

#Make blast DB of Solenopsis invicta, the reference species for M. pharaonis
#Do this for the hymenoptera database because that contains the most sequences
rule makeDB:
	input: "ref/hym/hym.fa"
	output: "blast_dir/{refsp}/{refsp}.fa","blast_dir/{refsp}/{refsp}.psq"
	shell: """grep ">.*{wildcards.refsp}" {input} | sed 's/>//' > keep{wildcards.refsp}; \
		pyfasta extract --header --fasta {input} --file keep{wildcards.refsp} | sed 's/.*{wildcards.refsp}|/>/' > {wildcards.refsp}.fa; \
		makeblastdb -in {wildcards.refsp}.fa -dbtype prot -out blast_dir/{wildcards.refsp}/{wildcards.refsp}; \
		mv {wildcards.refsp}.fa* blast_dir/{wildcards.refsp}/"""

#Run Hamstr to align genes to orthologs
rule Hamstr:
	input: 
		"ref/{db}/{db}.fa","ref/{db}/hmms",expand("blast_dir/{refsp}/{refsp}.psq",refsp=REF_SP),
		genome=lambda wildcards: GENOMES[wildcards.species]
	output: 
		"hamstrsearch_{species}_{db}.out"
	params: 
		rg=lambda wildcards: REF_PREFIX[wildcards.species]
	shell: "hamstr -sequence_file={input[genome]} -hmmset={wildcards.db} -hmmpath=/home/warnerm/mpharOGG/ref -refspec={params.rg} -taxon={wildcards.species} -blastpath=/home/warnerm/mpharOGG/blast_dir -central -append -cpu={THREADS}"


#Parse Hamstr output to get transcript -> OGG definitions
rule makeOGGmap:
	input: "hamstrsearch_{species}_{db}.out"
	output: "OGGmap_{species}_{db}"
	shell: """cat {input} | sed 's/|/\t/g' | awk '{{print $1"\t"$4}}' > {output}"""

#Create transcript to gene maps for Amel and Mphar
rule transcriptGeneMap:
	input: ref=lambda wildcards: GFF[wildcards.species]
	output: "tGmap{species}"
	shell: """grep "Gnomon.*CDS.*protein_id" {input} | sed 's/.*;gene=//' | sed 's/;.*protein_id=/\t/' | sed 's/;.*//' | uniq > {output}"""


#Combine OGGmaps to make one map for three species at the gene level
rule combineMap:
	input: ogg="OGGmap_{species}_{db}",tg="tGmap{species}"
	output: "gene_OGG_{species}_{db}.csv"
	shell: "python2.7 {SRC}/combineOGGmaps.py -i {input[tg]} -j {input[ogg]} -o {output}"


#Create OGG to gene map for Dmel
rule DmelMap:
	input: {ODB["hol"]}
	output: "map_Dmel"
	shell: """grep "Drosophila melanogaster" {input} | awk '{{ $1=""; $4=""; $5=""; $6=""; print}}' | sed 's/^ //' | sed 's/    / /'  | sed 's/ /\t/' | sed 's/ /\t/' > {output}"""

##Create mphar/Amel one-one OGGmaps
rule hymOGG:
	input: Amel="gene_OGG_Amel_{db}.csv",Mphar="gene_OGG_Mphar_{db}.csv"
	output: "HymOGG_{db}.csv"
	shell: """python2.7 {SRC}/hymOGGs.py -i {input[Amel]} -j {input[Mphar]} -o {output}"""

#Create three-way map
rule threeMap:
	input: "HymOGG_hol.csv","map_Dmel"
	output: "ThreeWayOGGMap.csv"
	shell: """python2.7 {SRC}/ThreeWayMap.py -i {input[0]} -j {input[1]} -o {output}"""

#From UniprotKB drosophila developmental proteins, create list of OGGs that are developmental proteins
rule dmelDevel: 
	input: "UniprotKB_dmel.txt","ThreeWayOGGMap.csv","Dmel.gff"
	output: "DmelDevelOGG.txt"
	shell: """grep "FBpp" {input[2]} | sed 's/.*Dbxref=FLYBASE://' | sed 's/,GeneID.*gene=/\t/' | sed 's/;.*//' | uniq > DmelMap.txt ;\
		python2.7 dmelDev.py -i {input[0]} -m "DmelMap.txt" -s {input[1]} -o {output}"""


